<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>.NET Uygulamalarının Çalışma Yapısı: Derleme ve Çalıştırma Süreçleri</title>
    <url>/post/390419117.html</url>
    <content><![CDATA[<p>Dotnet uygulamalarının çalışma yapısı, gerçekleşecek olan derleme ve çalıştırma süreçleri Language Specific Compiler, Intermediate Language, Common Language Runtime, Just-In-Time Compiler ve Native Code kavramları ile birlikte ele alınacaktır.</p>
<span id="more"></span>

<h2 id="Compilation-Derleme-Asamasi"><a href="#Compilation-Derleme-Asamasi" class="headerlink" title="Compilation (Derleme Aşaması)"></a>Compilation (Derleme Aşaması)</h2><mark class="label primary">Language Specific Compiler</mark>, yani dile özgü derleyiciler bulunmaktadır. C# dilini kullanarak bir uygulama geliştirdiğimizi varsayalım. Yazmış olduğumuz uygulamayı build ettiğimizde Language Specific Compiler, yazmış olduğumuz uygulamayı bir ara dile çevirir. Bu ara dil, <mark class="label primary">Microsoft Intermediate Language</mark>, <mark class="label primary">Common Intermediate Language</mark> veya <mark class="label primary">Intermediate Language</mark> olarak bilinmektedir. Ara dile çevrilmesi ile birlikte oluşacak olan dosyalar <mark class="label primary">.EXE</mark> veya <mark class="label primary">.DLL</mark> uzantılı dosyalar olacaktır.

<h2 id="Runtime-Calisma-Zamani-Asamasi"><a href="#Runtime-Calisma-Zamani-Asamasi" class="headerlink" title="Runtime (Çalışma Zamanı) Aşaması"></a>Runtime (Çalışma Zamanı) Aşaması</h2><p>Uygulamayı çalıştırdım. Uygulama çalıştırıldığı anda <mark class="label primary">Common Language Runtime</mark> devreye girmektedir. Common Language Runtime’ın devreye girmesi ile birlikte <mark class="label primary">Just-In-Time Compiler</mark> oluşan ilgili Microsoft Intermediate Language kodunu, <mark class="label primary">Native code</mark>‘a dönüştürmektedir. Native code, makine koduna karşılık gelmektedir. Yani işletim sistemimize özgü olarak, işletim sistemimizde ilgili uygulamanın çalışabilmesi için oluşturalan koddan bahsediyoruz. Native code’a dönüştürülme işleminden sonra uygulama başarılı bir şekilde çalıştırılır.</p>
<img data-src="/post/390419117/1.png" class="" title="Dotnet Compilation Runtime">

<h2 id="Ornek-Basit-Bir-Console-Uygulamasi"><a href="#Ornek-Basit-Bir-Console-Uygulamasi" class="headerlink" title="Örnek: Basit Bir Console Uygulaması"></a>Örnek: Basit Bir Console Uygulaması</h2><p>Konunun daha iyi anlaşılması için basit bir örnek yapalım.</p>
<h3 id="Yeni-Bir-Console-Uygulamasi-Olusturma"><a href="#Yeni-Bir-Console-Uygulamasi-Olusturma" class="headerlink" title="Yeni Bir Console Uygulaması Oluşturma"></a>Yeni Bir Console Uygulaması Oluşturma</h3><p>SampleApp adında bir Console uygulaması oluşturalım.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dotnet new console -o .</span><br></pre></td></tr></table></figure>

<img data-src="/post/390419117/2.png" class="" title="Dotnet Compilation Runtime">

<p>Proje dizinimiz şu şekilde oluşacaktır.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SampleApp/</span><br><span class="line">├── obj/</span><br><span class="line">├── Program.cs</span><br><span class="line">└── SampleApp.csproj</span><br></pre></td></tr></table></figure>

<h3 id="Uygulamayi-Derleme"><a href="#Uygulamayi-Derleme" class="headerlink" title="Uygulamayı Derleme"></a>Uygulamayı Derleme</h3><p>Projemizi build edelim. Build etme aşamasında Language Specific Compiler, yazılmış olan ilgili kodu Microsoft Intermediate Language koduna çevirir. Bu dosyalar daha önce belirtildiği gibi .EXE veya .DLL uzantılı dosyalar olmaktadır.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">dotnet build</span></span><br></pre></td></tr></table></figure>

<img data-src="/post/390419117/3.png" class="" title="Dotnet Compilation Runtime">

<p>Build etme işlemi sonlandığında proje dizininde <mark class="label primary">bin</mark> adlı bir dizin oluştuğunu gözlemleyeceğiz.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SampleApp/</span><br><span class="line">├── bin/</span><br><span class="line">├── obj/</span><br><span class="line">├── Program.cs</span><br><span class="line">└── SampleApp.csproj</span><br></pre></td></tr></table></figure>

<p>İlgili <mark class="label primary">.EXE</mark> uzantılı dosyamızın da ilgili dizin altında oluştuğunu gözlemliyoruz.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SampleApp/</span><br><span class="line">├── bin/</span><br><span class="line">│   └── debug/</span><br><span class="line">│       └── net9.0/</span><br><span class="line">│           ├── SampleApp.deps.json</span><br><span class="line">│           ├── SampleApp.dll</span><br><span class="line">│           ├── SampleApp.exe</span><br><span class="line">│           ├── SampleApp.pdb</span><br><span class="line">│           └── SampleApp.runtimeconfig.json</span><br><span class="line">├── obj/</span><br><span class="line">├── Program.cs</span><br><span class="line">└── SampleApp.csproj</span><br></pre></td></tr></table></figure>

<h3 id="Uygulamayi-Calistirma"><a href="#Uygulamayi-Calistirma" class="headerlink" title="Uygulamayı Çalıştırma"></a>Uygulamayı Çalıştırma</h3><p>Şimdi uygulamamızı çalıştıralım. Aşağıdaki komutu verdiğimiz anda Common Language Runtime devreye girer. Just-In-Time Compiler, ilgili Microsoft Intermediate Language kodunu native koda yani yerel koda dönüştürür. Bu da işletim sistemimize özgü oluşturulmuş olan bir makine kodudur. Native kod da oluşturulduktan sonra artık uygulama başarılı bir şekilde çalıştırılmaktadır.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">dotnet run</span></span><br></pre></td></tr></table></figure>

<img data-src="/post/390419117/4.png" class="" title="Dotnet Compilation Runtime">]]></content>
      <categories>
        <category>.NET</category>
      </categories>
      <tags>
        <tag>CLR</tag>
        <tag>JIT</tag>
        <tag>MSIL</tag>
        <tag>dotnet-runtime</tag>
        <tag>.NET çalışma mantığı</tag>
        <tag>.NET derleme süreci</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular Temelleri: SPA, TypeScript ve İlk Adımlar</title>
    <url>/post/1919449830.html</url>
    <content><![CDATA[<p>Bu yazımızda Angular’ın ne olduğunu, Single Page Application (SPA) mantığını ve Angular’ın temelinde kullanılan TypeScript dilini ele alacağız.</p>
<span id="more"></span>

<h2 id="1-Angular-Nedir"><a href="#1-Angular-Nedir" class="headerlink" title="1.Angular Nedir?"></a>1.Angular Nedir?</h2><p>Angular; Google tarafından geliştirilen ve desteklenen, TypeScript tabanlı bir frontend framework’tür.</p>
<p>Modern web uygulamaları geliştirmek için kullanılan güçlü bir araçtır. Single Page Application (SPA) mantığıyla çalışır.</p>
<p>Angular’ın öne çıkan özellikleri şunlardır.</p>
<ul>
<li>Google tarafından geliştirilen ve düzenli olarak güncellenen bir framework’tür (6 ayda bir yeni versiyon yayınlanır).</li>
<li>MVC (Model - View - Controller) mimarisine sahiptir.</li>
<li>Web API’leri destekler ve farklı backend teknolojileri ile kolayca entegre edilebilir.</li>
<li>Tip güvenliği sunan TypeScript dilini kullanır.</li>
</ul>
<h2 id="2-Single-Page-Application-Nedir"><a href="#2-Single-Page-Application-Nedir" class="headerlink" title="2.Single Page Application Nedir?"></a>2.Single Page Application Nedir?</h2><p>Bir web uygulaması geliştiriyorken 2 temel yaklaşım vardır:</p>
<ol>
<li>Multi-Page Application (MPA)</li>
<li>Single-Page Application (SPA)</li>
</ol>
<p>Multi-Page Application (MPA) yapısında:</p>
<ul>
<li>Her sayfa ayrı bir HTML dosyasıdır.</li>
<li>Sayfalar arası geçişte tüm içerik (navbar, layout vb.) sıfırdan yüklenir.</li>
<li>Her sayfaya tıklandığında yeniden yükleme yapılır, bu da daha fazla veri transferine sebep olur.</li>
</ul>
<p>Single-Page Application (SPA) yapısında:</p>
<ul>
<li>Tek bir ana HTML dosyası vardır.</li>
<li>Sayfa geçişleri, JavaScript tarafından yönetilir ve içerik dinamik olarak güncellenir.</li>
<li>Bu yaklaşım, uygulamanın daha hafif ve hızlı çalışmasını sağlar.</li>
<li>Angular gibi modern framework’ler SPA yapısını benimser.</li>
</ul>
<h2 id="3-TypeScript-Nedir"><a href="#3-TypeScript-Nedir" class="headerlink" title="3.TypeScript Nedir?"></a>3.TypeScript Nedir?</h2><p>TypeScript; Microsoft tarafından geliştirilen, JavaScript üzerine inşa edilmiş bir programlama dilidir.</p>
<p>Öne çıkan özellikleri:</p>
<ul>
<li>JavaScript’in üst sürümü gibi düşünülebilir.</li>
<li>Tip desteği (type safety) sunarak kodun daha güvenli bir okunabilir olmasını sağlar.</li>
<li>Kodlar önce TypeScript olarak yazılır. Ardından derlenerek JavaScript’e dönüştürülür.</li>
<li>Hataları derleme aşamasında yakalayabilmek avantajı sunar.</li>
<li>Geniş bir yapılandırma (config) dosyasına sahiptir.</li>
</ul>
<p>TypeScript’i doğrudan HTML içerisinde çalıştırmak mümkün değildir. Önce derlenip JavaScript’e çevrilmesi gerekir.</p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>Single Page Application</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
</search>
